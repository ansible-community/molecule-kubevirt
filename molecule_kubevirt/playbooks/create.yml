---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  vars:
    molecule_labels:
      owner: molecule
    default_namespace: "default"
    default_user_name: "molecule"
    default_vm_timeout: 60
    default_vm_memory: "2Gi"
    default_vm_machine_type: "q35"
    default_vm_disk_image: "quay.io/kubevirt/fedora-cloud-container-disk-demo"
    default_ssh_timeout: 300
    default_ssh_service_type: ClusterIP
    ssh_key_path: "{{ molecule_ephemeral_directory }}/identity_{{ item.name }}"

  tasks:
    - name: Create ssh key pair
      openssh_keypair:
        path: "{{ ssh_key_path }}"
        size: 1024
        type: rsa
      loop: "{{ molecule_yml.platforms  }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create cloud init with ssh identity for molecule user
      vars:
        user_data: |-
          {{ item.user_data | default({}) | from_yaml | combine(default_user_data | from_yaml, recursive=True, list_merge='prepend') }}
        default_user_data: |-
          users:
            - name: {{ item.user_name | default(default_user_name) }}
              sudo: ALL=(ALL) NOPASSWD:ALL
              plain_text_passwd: molecule
              lock_passwd: false
              ssh_authorized_keys:
                - {{ lookup('file', ssh_key_path + '.pub' ) }}
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ item.name }}"
            namespace: "{{ item.namespace | default(default_namespace) }}"
          type: Opaque
          stringData:
            userdata: |-
              #cloud-config
              {{ user_data | to_nice_yaml }}
      loop: "{{ molecule_yml.platforms  }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create virtual machines
      vars:
        container_disk_name: "{{ item.name }}"
        domain:
          devices:
            autoattachGraphicsDevice: "{{ item.autoattachGraphicsDevice | default(false) }}"
            disks:
              - disk:
                  bus: virtio
                name: "{{ container_disk_name }}"
              - disk:
                  bus: virtio
                name: ansiblecloudinitdisk
          machine:
            type: "{{ item.machine_type | default(default_vm_machine_type) }}"
          resources:
            requests:
              memory: "{{ item.memory_request | default(item.memoy) | default(default_vm_memory) }}"
              cpu: "{{ item.cpu_request | default(item.cpu) | default(omit) }}"
            limits:
              memory: "{{ item.memory_limit | default(item.memoy) | default(default_vm_memory) }}"
              cpu: "{{ item.cpu_limit | default(item.cpu) | default(omit) }}"
        networks: "{{ item.networks | default([]) }}"
        volumes:
          - containerDisk:
              image: "{{ item.image | default(default_vm_disk_image) }}"
              path: "{{ item.image_path | default(omit) }}"
              imagePullPolicy: "{{ item.image_pull_policy | default('IfNotPresent') }}"
            name: "{{ container_disk_name }}"
          - cloudInitNoCloud:
              secretRef:
                name: "{{ item.name }}"
            name: ansiblecloudinitdisk
      k8s:
        state: present
        definition:
          apiVersion: kubevirt.io/v1
          kind: VirtualMachine
          metadata:
            name: "{{ item.name }}"
            namespace: default
          spec:
            running: true
            template:
              metadata:
                annotations: "{{ item.annotations | default({}) }}"
                labels:
                  vm.cnv.io/name: "{{ item.name }}"
              spec:
                domain: "{{ item.domain | default({}) | combine(domain, recursive=True, list_merge='prepend') }}"
                networks: "{{ networks }}"
                volumes: "{{ volumes + (item.volumes | default([])) }}"
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"
      register: poll_reg

    - name: Deal with ssh services
      when: "item.ssh_service | default(None)"
      block:
        - name: Create ssh NodePort Kubernetes Services
          when: "item.ssh_service.type | default(default_ssh_service_type) == 'NodePort'"
          k8s:
            state: present
            definition:
              apiVersion: v1
              kind: Service
              metadata:
                name: "{{ item.name }}"
                namespace: "{{ item.namespace | default(default_namespace) }}"
              spec: "{{ spec | from_yaml }}"
          register: node_port_services
          loop: "{{ molecule_yml.platforms  }}"
          loop_control:
            label: "{{ item.name }}"
          # workaround https://stackoverflow.com/questions/63961938/ansible-variable-conversion-to-int-is-ignored
          vars:
            spec: |-
              ports:
                - port: 22
                  protocol: TCP
                  targetPort: 22
                  {%- if item.ssh_service.nodePort | default(None) +%}
                  nodePort: {{ item.ssh_service.nodePort | int }}
                  {%- endif +%}
              selector:
                vm.cnv.io/name: "{{ item.name }}"
              type: NodePort

        - name: Create ssh ClusterIP Kubernetes Services
          when: "item.ssh_service.type | default(default_ssh_service_type) == 'ClusterIP'"
          k8s:
            state: present
            definition:
              apiVersion: v1
              kind: Service
              metadata:
                name: "{{ item.name }}"
                namespace: "{{ item.namespace | default(default_namespace) }}"
              spec:
                clusterIP: "{{ item.ssh_service.clusterIP | default(omit) }}"
                ports:
                  - port: 22
                    protocol: TCP
                    targetPort: 22
                selector:
                  vm.cnv.io/name: "{{ item.name }}"
                type: ClusterIP
          register: cluster_ip_services
          loop: "{{ molecule_yml.platforms  }}"
          loop_control:
            label: "{{ item.name }}"

    - name: Get ip for VirtualMachineInstance
      k8s_info:
        kind: VirtualMachineInstance
        namespace: "{{ item.namespace | default(default_namespace) }}"
        name: "{{ item.name }}"
      loop: "{{ molecule_yml.platforms }}"
      register: virtual_machine_info
      retries: 3
      until: "virtual_machine_info.resources[0].status.interfaces[0].ipAddress | default(None)"
      when: "item.ssh_service is not defined"

    - name: Get Virtual Machine ip, indexed by name
      set_fact:
        virtual_machine_instance: >-
          {{ virtual_machine_instance | default({}) | combine ({name: instance}) }}
      vars:
        name: "{{ item.item.name }}"
        instance: "{{ item.resources[0] | default({}) }}"
      loop: "{{ virtual_machine_info.results }}"
      loop_control:
        label: "{{ item.item.name }}"
      when: "item.ssh_service is not defined"

    - name: SSH check block
      block:
        - name: Populate instance config dict
          set_fact:
            instance_conf_dict:
              instance: "{{ item.name }}"
              address: "{{ ssh_service_address }}"
              user: "{{ item.user_name | default('molecule') }}"
              port: "22"
              identity_file: "{{ molecule_ephemeral_directory }}/identity_{{ item.name }}"
          vars:
            vmi: "{{ virtual_machine_info.results | selectattr('item.name','==',item.name) | first }}"
            ssh_service_address: >-
              {%- set svc_type = item.ssh_service.type | default(None) -%}
              {%- if not svc_type -%}
                {{ ((vmi['resources'] |first)['status']['interfaces'] | first)['ipAddress'] }}
              {%- elif svc_type == 'NodePort' -%}
                {{ item.ssh_service.nodePort_host | default('localhost') }}:
                {{- ((node_port_services.results | selectattr('item.name','==',item.name) | first)['result']['spec']['ports'] | first)['nodePort'] }}
              {%- elif svc_type == 'ClusterIP' -%}
                {{ (cluster_ip_services.results | selectattr('item.name','==',item.name) | first)['result']['spec']['clusterIP'] }}
              {%- endif -%}
          register: instance_config_dict
          loop: "{{ molecule_yml.platforms }}"
          loop_control:
            label: "{{ item.name  }}"

        - name: Convert instance config dict to a list
          set_fact:
            instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

        - name: Async start ssh access test
          wait_for:
            timeout: "{{ item.ssh_timeout | default(default_ssh_timeout) }}"
            port: "{{ item.port | default('22') }}"
            host: "{{ item.address }}"
            delay: 1
          loop: "{{ instance_conf }}"
          loop_control:
            label: "{{ {item.instance: item.address} }}"
          async: "{{ item.ssh_timeout | default(default_ssh_timeout) }}"
          poll: 0
          register: ssh_reg

        - name: SSH test
          async_status:
            jid: "{{ async_result_item.ansible_job_id }}"
          loop: "{{ ssh_reg.results }}"
          loop_control:
            loop_var: "async_result_item"
          register: async_poll_results
          until: async_poll_results.finished
          delay: 1
          retries: "{{ item['ansible_facts']['instance_conf_dict']['ssh_timeout'] | default(default_ssh_timeout) }}"
      rescue:
        - name: Failed to get ssh
          k8s_info:
            kind: "{{ item }}"
            api_version: kubevirt.io/v1alpha3
            namespace: "{{ item.namespace | default(default_namespace) }}"
          with_items:
            - Service
            - VirtualMachine
            - VirtualMachineInstance
          register: vm_info

        - name: Failed to get running VM - Dump Service, VM and VMI
          debug:
            var: dump_var
          vars:
            dump_var: "{{ item }}"
          loop: "{{ vm_info.results }}"
          failed_when: true

    - name: Dump instance config
      copy:
        content: "{{ instance_conf | to_json | from_json | to_yaml }}"
        dest: "{{ molecule_instance_config }}"
        mode: 0600
