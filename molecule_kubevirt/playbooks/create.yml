---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  vars:
    molecule_labels:
      owner: molecule
    default_namespace: "default"
    default_user_name: "molecule"
    default_vm_timeout: 60
    default_vm_memory: "2Gi"
    default_vm_machine_type: "q35"
    default_vm_disk_image: "quay.io/kubevirt/fedora-cloud-container-disk-demo"
    default_ssh_timeout: 300
    default_ssh_service_type: ClusterIP
    ssh_key_path: "{{ molecule_ephemeral_directory }}/identity_{{ item.name }}"

  tasks:
    - name: Create ssh key pair
      openssh_keypair:
        path: "{{ ssh_key_path }}"
        size: 1024
        type: rsa
      loop: "{{ molecule_yml.platforms  }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create cloud init with ssh identity for molecule user
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ item.name }}-cloud-init"
            namespace: "{{ item.namespace | default(default_namespace) }}"
          type: Opaque
          stringData:
            userdata: |-
              #cloud-config
              users:
                - name: {{ item.user_name | default(default_user_name) }}
                  sudo: ALL=(ALL) NOPASSWD:ALL
                  plain_text_passwd: molecule
                  lock_passwd: false
                  ssh_authorized_keys:
                    - {{ lookup('file', molecule_ephemeral_directory + '/identity_'+ item.name + '.pub' ) }}
      loop: "{{ molecule_yml.platforms  }}"
      loop_control:
        label: "{{ item.name }}"

    # FIXME : dont forget same on delete
    - name: Compute disk facts - container disk case
      set_fact:
        disks: "{{ disks | default({}) | combine ({ item.name: disk }) }}"
      when: "not item.cdi_source_http_url | default(None)"
      vars:
        disk:
          - name: "{{ item.name }}-container-disk"
            volume:
              containerDisk:
                # FIXME : do not rely on this repo => what default could be set?
                image: "{{ item.image | default('quay.io/jseguillon/kubevirt-images:centos-7-x86_64-genericcloud-2009') }}"
                path: "{{ item.image_path | default(omit) }}"
                imagePullPolicy: "IfNotPresent"
            disk:
              bus: virtio
      with_items: "{{ molecule_yml.platforms  }}"

    # FIXME: Also need delete
    - name: Compute disk facts - CDI url case
      set_fact:
        disks: "{{ disks | default({}) | combine ({ item.name: disk }) }}"
      vars:
        disk:
          - name: "{{ item.name }}-cdi-disk"
            volume:
              persistentVolumeClaim:
                claimName: "{{ item.name }}"
              disk:
                bus: virtio
      when: "item.cdi_source_http_url | default(None)"
      with_items: "{{ molecule_yml.platforms  }}"

    # TODO: use async / poll
    # TODO: fail if both image and cdi are given in platform config
    - name: Import data via CDI
      when: "item.cdi_source_http_url | default(None)"
      block:
        - name: Create a PVC and import data from an external source
          community.kubevirt.kubevirt_pvc:
            name: "{{ item.name }}"
            namespace: "{{ item.namespace | default('default') }}"
            size: "{{ item.cdi_pvc_size }}"
            access_modes:
              - ReadWriteOnce
            cdi_source:
              http:
                url:  "{{ item.cdi_source_http_url }}"
              # If the URL points to a tar.gz containing the disk image, set to archive:
              content_type: "{{ item.cdi_source_content_type | default(omit) }}"
            wait: true
            # FIXME: need override in platforms config
            wait_timeout: 900
          with_items: "{{ molecule_yml.platforms  }}"

      rescue:
        - name: Failed to import URL via CDI
          k8s_info:
            kind: "PersistentVolumeClaim"
            namespace: "{{ item.namespace | default('default') }}"
          register: pvc_info

        - name: Failed to import URL via CDI - Dump
          fail:
            msg: "{{ pvc_info }}"


    - name: Async create virtual machine and start it
      community.kubevirt.kubevirt_vm:
        state: running
        wait: true
        wait_timeout: "{{ item.wait_timeout | default(default_vm_timeout) }}"
        name: "{{ item.name }}"
        namespace: "{{ item.namespace | default(default_namespace) }}"
        memory: "{{ item.memory | default(default_vm_memory) }}"
        cpu_cores: "{{ item.cpu_cores | default(omit) }}"
        machine_type: "{{ item.machine_type | default(default_vm_machine_type) }}"

        interfaces:
          - name: default
            masquerade: {}
            ports:
              - port: 22
            network:
              pod: {}

        cloud_init_nocloud:
          secretRef:
            name: "{{ item.name }}-cloud-init"

        cpu_model: "{{ item.cpu_model | default(omit) }}"
        headless: "{{ item.headless | default(omit) }}"
        hugepage_size: "{{ item.hugepage_size | default(omit) }}"

        cpu_limit: "{{ item.cpu_limit | default(omit) }}"
        cpu_shares: "{{ item.cpu_shares | default(omit) }}"
        ephemeral: "{{ item.ephemeral | default(omit) }}"

        disks: "{{ disks[item.name] }}"

      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"
      async: "{{ item.wait_timeout | default(default_vm_timeout) }}"
      poll: 0
      register: poll_reg

    - name: Create ssh NodePort Kubernetes Services
      when: "item.ssh_service.type | default(default_ssh_service_type) == 'NodePort'"
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ item.name }}"
            namespace: "{{ item.namespace | default(default_namespace) }}"
          spec: "{{ spec | from_yaml }}"
      register: node_port_services
      loop: "{{ molecule_yml.platforms  }}"
      loop_control:
        label: "{{ item.name }}"
      # workaround https://stackoverflow.com/questions/63961938/ansible-variable-conversion-to-int-is-ignored
      vars:
        spec: |-
          ports:
            - port: 22
              protocol: TCP
              targetPort: 22
              {%- if item.ssh_service.nodePort | default(None) +%}
              nodePort: {{ item.ssh_service.nodePort | int }}
              {%- endif +%}
          selector:
            vm.cnv.io/name: "{{ item.name }}"
          type: NodePort

    - name: Create ssh ClusterIP Kubernetes Services
      when: "item.ssh_service.type | default(default_ssh_service_type) == 'ClusterIP'"
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ item.name }}"
            namespace: "{{ item.namespace | default(default_namespace) }}"
          spec:
            clusterIP: "{{ item.ssh_service.clusterIP | default(omit) }}"
            ports:
              - port: 22
                protocol: TCP
                targetPort: 22
            selector:
              vm.cnv.io/name: "{{ item.name }}"
            type: ClusterIP
      register: cluster_ip_services
      loop: "{{ molecule_yml.platforms  }}"
      loop_control:
        label: "{{ item.name }}"

    - name: VM creation check block
      block:
        - name: Check VM creation status
          async_status:
            jid: "{{ async_result_item.ansible_job_id }}"
          loop: "{{ poll_reg.results }}"
          loop_control:
            loop_var: "async_result_item"
          register: async_poll_results
          until: async_poll_results.finished
          delay: 1
          retries: "{{ default_vm_timeout }}"
      rescue:
        - name: Failed to get running VM - Get VM and VMI
          k8s_info:
            kind: "{{ item }}"
            api_version: kubevirt.io/v1alpha3
            namespace: "{{ item.namespace | default(default_namespace) }}"
          with_items:
            - VirtualMachine
            - VirtualMachineInstance
          register: vm_info

        - name: Failed to get running VM - Dump VM and VMI
          fail:
            msg: "{{ vm_info }}"

    - name: SSH check block
      block:
        - name: Get ssh services info, indexed by service name
          set_fact:
            service_instance: >-
              {{ service_instance|default({}) | combine({svc_name: svc_spec}) }}
          loop: "{{ loop_services | flatten }}"
          loop_control:
            label: "{{ {svc_name: svc_spec } }}"
          vars:
            loop_services:
              - "{{ cluster_ip_services.results | rejectattr('skipped', 'true') }}"
              - "{{ node_port_services.results| rejectattr('skipped', 'true') }}"
            svc_name: "{{ item.result.metadata.name }}"
            svc_spec: "{{ item.result.spec }}"

        - name: Populate instance config dict
          set_fact:
            instance_conf_dict:
              instance: "{{ item.name }}"
              address: "{{ ssh_service_address }}"
              user: "{{ item.user_name | default('molecule') }}"
              port: "22"
              identity_file: "{{ molecule_ephemeral_directory }}/identity_{{ item.name }}"
          vars:
            # set target ssh address regarding platforms configuration
            ssh_service_address: >-
              {%- set svc_ep = item.ssh_service.type | default('ClusterIP') -%}
              {%- if svc_ep == 'NodePort' -%}
              {{ item.ssh_service.nodePort_host | default('localhost') }}:{{ service_instance[item.name].ports[item.ssh_service.nodePort_index | default(0)].nodePort }}
              {%- elif svc_ep == 'ClusterIP' -%}
              {{ service_instance[item.name].clusterIP }}
              {%- endif -%}
          register: instance_config_dict
          loop: "{{ molecule_yml.platforms }}"
          loop_control:
            label: "{{ item.name  }}"

        - name: Convert instance config dict to a list
          set_fact:
            instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

        - name: Async start ssh access test
          wait_for:
            timeout: "{{ item.ssh_timeout | default(default_ssh_timeout) }}"
            port: "{{ item.port | default('22') }}"
            host: "{{ item.address }}"
            delay: 1
          loop: "{{ instance_conf }}"
          loop_control:
            label: "{{ {item.instance: item.address} }}"
          async: "{{ item.ssh_timeout | default(default_ssh_timeout) }}"
          poll: 0
          register: ssh_reg

        - name: Check ssh access test
          async_status:
            jid: "{{ async_result_item.ansible_job_id }}"
          loop: "{{ ssh_reg.results }}"
          loop_control:
            loop_var: "async_result_item"
          register: async_poll_results
          until: async_poll_results.finished
          delay: 1
          retries: "{{ item['ansible_facts']['instance_conf_dict']['ssh_timeout'] | default(default_ssh_timeout) }}"

    - name: Dump instance config
      copy:
        content: "{{ instance_conf | to_json | from_json | to_yaml }}"
        dest: "{{ molecule_instance_config }}"
        mode: 0600
